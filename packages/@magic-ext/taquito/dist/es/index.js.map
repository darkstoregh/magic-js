{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/MagicSinger.ts"],
  "sourcesContent": ["import { Extension } from '@magic-sdk/commons';\nimport { TaquitoConfig, TaquitoPayloadMethod } from './type';\nimport { MagicSigner } from './MagicSinger';\n\nexport class TaquitoExtension extends Extension.Internal<'taquito', any> {\n  name = 'taquito' as const;\n  config: any = {};\n\n  constructor(public taquitoConfig: TaquitoConfig) {\n    super();\n\n    this.config = {\n      rpcUrl: taquitoConfig.rpcUrl,\n    };\n  }\n\n  public async getPublicKey() {\n    return this.request(this.utils.createJsonRpcRequestPayload(TaquitoPayloadMethod.TaquitpGetPublicKeyAndHash, []));\n  }\n\n  public async sign(bytes: string, watermark?: Uint8Array): Promise<Buffer> {\n    return this.request(\n      this.utils.createJsonRpcRequestPayload(TaquitoPayloadMethod.TaquitoSign, [\n        {\n          bytes,\n          watermark,\n        },\n      ]),\n    );\n  }\n\n  public async createMagicSigner(): Promise<any> {\n    const { pk, pkh } = await this.getPublicKey();\n    return new MagicSigner(pkh, pk, this);\n  }\n}\n", "import { Signer } from './SignerInterface';\nimport { TaquitoPayloadMethod } from './type';\n\nexport class MagicSigner implements Signer {\n  private magic: any;\n  constructor(private pkh: string, private pK: string, magic: any) {\n    this.magic = magic;\n  }\n\n  async publicKeyHash(): Promise<string> {\n    return this.pkh;\n  }\n\n  async publicKey(): Promise<string> {\n    return this.pK;\n  }\n\n  async secretKey(): Promise<string> {\n    throw new Error('Secret key cannot be exposed');\n  }\n\n  async sign(\n    bytes: string,\n    watermark?: Uint8Array,\n  ): Promise<{\n    bytes: string;\n    sig: string;\n    prefixSig: string;\n    sbytes: string;\n  }> {\n    return this.magic.request(\n      this.magic.utils.createJsonRpcRequestPayload(TaquitoPayloadMethod.TaquitoSign, [\n        {\n          bytes,\n          watermark,\n        },\n      ]),\n    );\n  }\n}\n"],
  "mappings": "6MAAA,OAAS,aAAAA,MAAiB,qBCGnB,IAAMC,EAAN,KAAoC,CAEzC,YAAoBC,EAAqBC,EAAYC,EAAY,CAA7C,SAAAF,EAAqB,QAAAC,EACvC,KAAK,MAAQC,CACf,CAEM,eAAiC,QAAAC,EAAA,sBACrC,OAAO,KAAK,GACd,GAEM,WAA6B,QAAAA,EAAA,sBACjC,OAAO,KAAK,EACd,GAEM,WAA6B,QAAAA,EAAA,sBACjC,MAAM,IAAI,MAAM,8BAA8B,CAChD,GAEM,KACJC,EACAC,EAMC,QAAAF,EAAA,sBACD,OAAO,KAAK,MAAM,QAChB,KAAK,MAAM,MAAM,2CAA8D,CAC7E,CACE,MAAAC,EACA,UAAAC,CACF,CACF,CAAC,CACH,CACF,GACF,EDnCO,IAAMC,EAAN,cAA+BC,EAAU,QAAyB,CAIvE,YAAmBC,EAA8B,CAC/C,MAAM,EADW,mBAAAA,EAHnB,UAAO,UACP,YAAc,CAAC,EAKb,KAAK,OAAS,CACZ,OAAQA,EAAc,MACxB,CACF,CAEa,cAAe,QAAAC,EAAA,sBAC1B,OAAO,KAAK,QAAQ,KAAK,MAAM,0DAA6E,CAAC,CAAC,CAAC,CACjH,GAEa,KAAKC,EAAeC,EAAyC,QAAAF,EAAA,sBACxE,OAAO,KAAK,QACV,KAAK,MAAM,2CAA8D,CACvE,CACE,MAAAC,EACA,UAAAC,CACF,CACF,CAAC,CACH,CACF,GAEa,mBAAkC,QAAAF,EAAA,sBAC7C,GAAM,CAAE,GAAAG,EAAI,IAAAC,CAAI,EAAI,MAAM,KAAK,aAAa,EAC5C,OAAO,IAAIC,EAAYD,EAAKD,EAAI,IAAI,CACtC,GACF",
  "names": ["Extension", "MagicSigner", "pkh", "pK", "magic", "__async", "bytes", "watermark", "TaquitoExtension", "Extension", "taquitoConfig", "__async", "bytes", "watermark", "pk", "pkh", "MagicSigner"]
}
