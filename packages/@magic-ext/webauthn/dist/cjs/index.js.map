{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/utils/webauthn.js"],
  "sourcesContent": ["import { Extension } from '@magic-sdk/commons';\nimport {\n  RegisterNewUserConfiguration,\n  LoginWithWebAuthnConfiguration,\n  MagicWebAuthnPayloadMethod,\n  WebAuthnSDKErrorCode,\n  UpdateWebAuthnInfoConfiguration,\n} from './types';\nimport { transformAssertionForServer, transformNewAssertionForServer } from './utils/webauthn.js';\n\nexport class WebAuthnExtension extends Extension.Internal<'webauthn', any> {\n  name = 'webauthn' as const;\n  config: any = {};\n\n  private createWebAuthnNotSupportError() {\n    this.createError(WebAuthnSDKErrorCode.WebAuthnNotSupported, 'WebAuthn is not supported in this device.', {});\n  }\n\n  private createWebAuthCreateCredentialError(message: string) {\n    this.createError(WebAuthnSDKErrorCode.WebAuthnCreateCredentialError, `Error creating credential: ${message}`, {});\n  }\n\n  public async registerNewUser(configuration: RegisterNewUserConfiguration) {\n    if (!window.PublicKeyCredential) {\n      throw this.createWebAuthnNotSupportError();\n    }\n    const { username, nickname = '' } = configuration;\n\n    const options = await this.request<any>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.WebAuthnRegistrationStart, [{ username }]),\n    );\n\n    let credential;\n    try {\n      credential = (await navigator.credentials.create({\n        publicKey: options.credential_options,\n      })) as any;\n    } catch (err: any) {\n      throw this.createWebAuthCreateCredentialError(err);\n    }\n\n    return this.request<string | null>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWithWebAuth, [\n        {\n          id: options.id,\n          nickname,\n          transport: credential.response.getTransports(),\n          user_agent: navigator.userAgent,\n          registration_response: transformNewAssertionForServer(credential),\n        },\n      ]),\n    );\n  }\n\n  public async login(configuration: LoginWithWebAuthnConfiguration) {\n    if (!window.PublicKeyCredential) {\n      throw this.createWebAuthnNotSupportError();\n    }\n    const { username } = configuration;\n\n    const transformedCredentialRequestOptions = await this.request<any>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.LoginWithWebAuthn, [{ username }]),\n    );\n\n    let assertion;\n    try {\n      assertion = (await navigator.credentials.get({\n        publicKey: transformedCredentialRequestOptions,\n      })) as any;\n    } catch (err: any) {\n      throw this.createWebAuthCreateCredentialError(err);\n    }\n\n    return this.request<string | null>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.WebAuthnLoginVerify, [\n        {\n          username,\n          assertion_response: transformAssertionForServer(assertion),\n        },\n      ]),\n    );\n  }\n\n  public updateInfo(configuration: UpdateWebAuthnInfoConfiguration) {\n    const { id, nickname } = configuration;\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.UpdateWebAuthnInfo, [\n      {\n        webAuthnCredentialsId: id,\n        nickname,\n      },\n    ]);\n    return this.request<any[]>(requestPayload);\n  }\n\n  public unregisterDevice(id: string) {\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.UnregisterWebAuthDevice, [\n      {\n        webAuthnCredentialsId: id,\n      },\n    ]);\n\n    return this.request<any>(requestPayload);\n  }\n\n  public async registerNewDevice(nickname = '') {\n    if (!window.PublicKeyCredential) {\n      throw this.createWebAuthnNotSupportError();\n    }\n    const options = await this.request<any>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWebAuthDeviceStart, []),\n    );\n\n    let credential;\n    try {\n      credential = (await navigator.credentials.create({\n        publicKey: options.credential_options,\n      })) as any;\n    } catch (err: any) {\n      throw this.createWebAuthCreateCredentialError(err);\n    }\n\n    return this.request<string | null>(\n      this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.RegisterWebAuthDevice, [\n        {\n          nickname,\n          transport: credential.response.getTransports(),\n          user_agent: navigator.userAgent,\n          registration_response: transformNewAssertionForServer(credential),\n        },\n      ]),\n    );\n  }\n\n  public getMetadata() {\n    const requestPayload = this.utils.createJsonRpcRequestPayload(MagicWebAuthnPayloadMethod.GetWebAuthnInfo, []);\n    return this.request<any[]>(requestPayload);\n  }\n}\n", "const lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/* eslint-disable */\n/* istanbul ignore next  */\nfunction fromByteArray(uint8) {\n  let i;\n  const extraBytes = uint8.length % 3; // if we have 1 byte left, pad 2 bytes\n  let output = '';\n  let temp;\n  let length;\n\n  function encode(num) {\n    return lookup.charAt(num);\n  }\n\n  function tripletToBase64(num) {\n    return encode((num >> 18) & 0x3f) + encode((num >> 12) & 0x3f) + encode((num >> 6) & 0x3f) + encode(num & 0x3f);\n  }\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n    output += tripletToBase64(temp);\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  switch (extraBytes) {\n    case 1:\n      temp = uint8[uint8.length - 1];\n      output += encode(temp >> 2);\n      output += encode((temp << 4) & 0x3f);\n      output += '==';\n      break;\n    case 2:\n      temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n      output += encode(temp >> 10);\n      output += encode((temp >> 4) & 0x3f);\n      output += encode((temp << 2) & 0x3f);\n      output += '=';\n      break;\n    default:\n      break;\n  }\n\n  return output;\n}\n\n/* istanbul ignore next  */\nfunction b64enc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n/* istanbul ignore next  */\nfunction b64RawEnc(buf) {\n  return fromByteArray(buf).replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/* istanbul ignore next  */\nfunction hexEncode(buf) {\n  return Array.from(buf)\n    .map(function (x) {\n      return `0${x.toString(16)}`.substr(-2);\n    })\n    .join('');\n}\n\n/**\n * Transforms the binary data in the credential into base64 strings\n * for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n/* istanbul ignore next  */\nexport const transformNewAssertionForServer = (newAssertion) => {\n  const attObj = new Uint8Array(newAssertion.response.attestationObject);\n  const clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  const rawId = new Uint8Array(newAssertion.rawId);\n\n  const registrationClientExtensions = newAssertion.getClientExtensionResults();\n\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    attObj: b64enc(attObj),\n    clientData: b64enc(clientDataJSON),\n    registrationClientExtensions: JSON.stringify(registrationClientExtensions),\n  };\n};\n\n/**\n * Encodes the binary data in the assertion into strings for posting to the server.\n * @param {PublicKeyCredential} newAssertion\n */\n/* istanbul ignore next  */\nexport const transformAssertionForServer = (newAssertion) => {\n  const authData = new Uint8Array(newAssertion.response.authenticatorData);\n  const clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);\n  const rawId = new Uint8Array(newAssertion.rawId);\n  const sig = new Uint8Array(newAssertion.response.signature);\n  const assertionClientExtensions = newAssertion.getClientExtensionResults();\n\n  return {\n    id: newAssertion.id,\n    rawId: b64enc(rawId),\n    type: newAssertion.type,\n    authData: b64RawEnc(authData),\n    clientData: b64RawEnc(clientDataJSON),\n    signature: hexEncode(sig),\n    assertionClientExtensions: JSON.stringify(assertionClientExtensions),\n  };\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "WebAuthnExtension", "__toCommonJS", "import_commons", "lookup", "fromByteArray", "uint8", "i", "extraBytes", "output", "temp", "length", "encode", "num", "tripletToBase64", "b64enc", "buf", "b64RawEnc", "hexEncode", "x", "transformNewAssertionForServer", "newAssertion", "attObj", "clientDataJSON", "rawId", "registrationClientExtensions", "transformAssertionForServer", "authData", "sig", "assertionClientExtensions", "WebAuthnExtension", "message", "configuration", "__async", "username", "nickname", "options", "credential", "err", "transformNewAssertionForServer", "transformedCredentialRequestOptions", "assertion", "transformAssertionForServer", "id", "requestPayload"]
}
