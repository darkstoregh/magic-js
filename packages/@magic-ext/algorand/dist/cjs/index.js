"use strict";var g=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var G=Object.prototype.hasOwnProperty;var f=(a,r)=>{for(var n in r)g(a,n,{get:r[n],enumerable:!0})},q=(a,r,n,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of T(r))!G.call(a,i)&&i!==n&&g(a,i,{get:()=>r[i],enumerable:!(e=y(r,i))||e.enumerable});return a};var R=a=>q(g({},"__esModule",{value:!0}),a);var s=(a,r,n)=>new Promise((e,i)=>{var p=t=>{try{o(n.next(t))}catch(c){i(c)}},d=t=>{try{o(n.throw(t))}catch(c){i(c)}},o=t=>t.done?e(t.value):Promise.resolve(t.value).then(p,d);o((n=n.apply(a,r)).next())});var h={};f(h,{AlgorandExtension:()=>l});module.exports=R(h);var u=require("@magic-sdk/commons");var l=class extends u.Extension.Internal{constructor(n){super();this.algorandConfig=n;this.name="algod";this.config={};this.config={rpcUrl:n.rpcUrl,chainType:"ALOGD"}}signTransaction(n){return s(this,null,function*(){return this.request(this.utils.createJsonRpcRequestPayload("algod_signTransaction",n))})}signBid(n){return s(this,null,function*(){return this.request(this.utils.createJsonRpcRequestPayload("algod_signBid",n))})}getWallet(){return s(this,null,function*(){return this.request(this.utils.createJsonRpcRequestPayload("algod_getWallet",[]))})}signGroupTransaction(n){return s(this,null,function*(){return this.request(this.utils.createJsonRpcRequestPayload("algod_signGroupTransaction",n))})}signGroupTransactionV2(n){return s(this,null,function*(){return this.request(this.utils.createJsonRpcRequestPayload("algod_signGroupTransactionV2",n))})}};
//# sourceMappingURL=index.js.map
